На первый взгляд этот алгоритм довольно надежен и прост в исполнении, но с момента его создания и первых применений выявилось много слабых мест, часть из которых актуальна до сих пор. Одной из популярнейших атак является генерация простых чисел.
На случайные числа p и q накладываются следующие ограничение:
    * Случайные числа p и q не должны быть слишком близки друг к другу, иначе можно будет их найти, используя метод факторизации Ферма. Однако, если оба простых числа p и q были сгенерированы независимо, то это ограничение с огромной вероятностью автоматически выполняется.

Предположим, некая сторона B хочет расшифровать послание со стороны A.

Чтобы избежать генерирования различных модулей n = p * q для каждого пользователя, защищённый сервер использует единый n для шифрования всех сообщений. Сторона A использует этот сервер для получения сообщения M.

Казалось бы, шифротекст C = M^e mod n, отправленный стороне A, не может быть расшифрован стороной B, если она не обладает секретным ключом d стороны A. Однако сторона B может использовать свои экспоненты (e, d), чтобы разложить модуль n, и после этого, зная e, вычислить секретную экспоненту d.

Существует еще довольно большое количество атак, использующих слабые места и уязвимости в реализации алгоритма RSA, например: атака Хастада, атака Винера, атака на подпись RSA в схеме с нотариусом, атака Франклина-Рейтера, атака по частично известной секретной экспоненте и другие.
